(require '[cljbreaker.models.game :as game])
(doc dotimes)
(dotimes [_ 5] (game/create))
(dotimes [_ 5] (println (game/create))
)
(doc rand-nth)
exit
(require '[cljbreaker.models.game :as game])
(dotimes [_ 5] (game/create))
(dotimes [_ 5] (println (game/create))
)
(game/create)
exit
(require '[cljbreaker.models.game :as game])
(str (game/create))
(apply str (game/create))
exit
(in-ns 'cljbreaker.routes.home)
(board)
exit
(require '[cljbreaker.routes.home :as home])
(home/board)
exit
(require '[cljbreaker.routes.home :home])
(require '[cljbreaker.routes.home :as home])
(home/board)
(home/board {:one "r" :two "g" :three "b" :four "y"}
)
(home/board {:one "r" :two "g" :three "b" :four "y" :exact 2 :unordered 0}
)
(home/board {:one "r" :two "g" :three "b" :four "y" :exact 2 :unordered 1}
)
(and 1 0)
(and nil nil)
(and nil 1)
(and 1 2)
(doc when)
(true? (and 1 2 ))
(true? (and 1 1 ))
(true? (and 1 0 ))
(doc and)
(true? 1)
(doc true?)
(doc ifn?)
(if (and 1 0) "true" "false")
(if (and 1 nil) "true" "false")
(if (and 1 0) "true" "false")
(when (and 1 0) "true")
(home/board {:one "r" :two "g" :three "b" :four "y" :exact 2 :unordered 1})
(require 'noir.core)
exit
(use 'hiccup.core)
exit
(list nil 1)
(remove nil? [nil 1 2 3])
(vec [] [])
(vector [] [])
(vector nil 1)
(list (when (false) 1) 2)
(when (false) 1)
(when (< 1 1) 1)
(list (when (< 1 1) 1) 2)
(require '[cljbreaker.routes.home :as home])
(home/board)
(home/board {:one "r" :two "g" :three "b" :four "y" :exact 2 :unordered 1})
(in-ns 'cljbreaker.routes.home)
(layout/common (board {:one "r" :two "g" :three "b" :four "y" :exact 2 :unordered 1}))
(layout/common (board {:one "r" :two "g" :three "b" :four "y" :exact 2}))
exit
